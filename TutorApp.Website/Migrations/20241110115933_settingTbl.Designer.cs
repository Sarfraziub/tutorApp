// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TutorApp.Website.Context;

#nullable disable

namespace TutorApp.Website.Migrations
{
    [DbContext(typeof(SchoolDbContext))]
    [Migration("20241110115933_settingTbl")]
    partial class settingTbl
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TutorApp.Website.Models.Admin", b =>
                {
                    b.Property<int>("AdminId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdminId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AdminId");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("TutorApp.Website.Models.Class", b =>
                {
                    b.Property<int>("ClassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClassId"));

                    b.Property<string>("ClassName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ClassId");

                    b.ToTable("Classes");

                    b.HasData(
                        new
                        {
                            ClassId = 1,
                            ClassName = "Class 1"
                        },
                        new
                        {
                            ClassId = 2,
                            ClassName = "Class 2"
                        },
                        new
                        {
                            ClassId = 3,
                            ClassName = "Class 3"
                        },
                        new
                        {
                            ClassId = 4,
                            ClassName = "Class 4"
                        },
                        new
                        {
                            ClassId = 5,
                            ClassName = "Class 5"
                        },
                        new
                        {
                            ClassId = 6,
                            ClassName = "Class 6"
                        },
                        new
                        {
                            ClassId = 7,
                            ClassName = "Class 7"
                        },
                        new
                        {
                            ClassId = 8,
                            ClassName = "Class 8"
                        },
                        new
                        {
                            ClassId = 9,
                            ClassName = "Class 9"
                        },
                        new
                        {
                            ClassId = 10,
                            ClassName = "Class 10"
                        });
                });

            modelBuilder.Entity("TutorApp.Website.Models.Setting", b =>
                {
                    b.Property<int>("SettingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SettingId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LogoImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SettingId");

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("TutorApp.Website.Models.Student", b =>
                {
                    b.Property<int>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StudentId"));

                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StudentId");

                    b.HasIndex("ClassId");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            StudentId = 1,
                            ClassId = 1,
                            Email = "alice@example.com",
                            IsApproved = false,
                            Name = "Alice",
                            PasswordHash = "hashedPassword1"
                        },
                        new
                        {
                            StudentId = 2,
                            ClassId = 1,
                            Email = "bob@example.com",
                            IsApproved = false,
                            Name = "Bob",
                            PasswordHash = "hashedPassword2"
                        },
                        new
                        {
                            StudentId = 3,
                            ClassId = 2,
                            Email = "charlie@example.com",
                            IsApproved = false,
                            Name = "Charlie",
                            PasswordHash = "hashedPassword3"
                        },
                        new
                        {
                            StudentId = 4,
                            ClassId = 2,
                            Email = "david@example.com",
                            IsApproved = false,
                            Name = "David",
                            PasswordHash = "hashedPassword4"
                        },
                        new
                        {
                            StudentId = 5,
                            ClassId = 3,
                            Email = "eve@example.com",
                            IsApproved = false,
                            Name = "Eve",
                            PasswordHash = "hashedPassword5"
                        });
                });

            modelBuilder.Entity("TutorApp.Website.Models.StudentFile", b =>
                {
                    b.Property<int>("FileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FileId"));

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TopicId")
                        .HasColumnType("int");

                    b.HasKey("FileId");

                    b.HasIndex("TopicId");

                    b.ToTable("Files");

                    b.HasData(
                        new
                        {
                            FileId = 1,
                            FileName = "Math Homework",
                            FilePath = "/",
                            TopicId = 1
                        },
                        new
                        {
                            FileId = 2,
                            FileName = "Science Project",
                            FilePath = "/",
                            TopicId = 3
                        },
                        new
                        {
                            FileId = 3,
                            FileName = "History Essay",
                            FilePath = "/",
                            TopicId = 4
                        });
                });

            modelBuilder.Entity("TutorApp.Website.Models.Subject", b =>
                {
                    b.Property<int>("SubjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubjectId"));

                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.Property<string>("SubjectName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SubjectId");

                    b.HasIndex("ClassId");

                    b.ToTable("Subjects");

                    b.HasData(
                        new
                        {
                            SubjectId = 1,
                            ClassId = 1,
                            SubjectName = "Mathematics"
                        },
                        new
                        {
                            SubjectId = 2,
                            ClassId = 1,
                            SubjectName = "Science"
                        },
                        new
                        {
                            SubjectId = 3,
                            ClassId = 2,
                            SubjectName = "History"
                        },
                        new
                        {
                            SubjectId = 4,
                            ClassId = 2,
                            SubjectName = "Geography"
                        },
                        new
                        {
                            SubjectId = 5,
                            ClassId = 3,
                            SubjectName = "Literature"
                        });
                });

            modelBuilder.Entity("TutorApp.Website.Models.Topic", b =>
                {
                    b.Property<int>("TopicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TopicId"));

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.Property<string>("TopicName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TopicId");

                    b.HasIndex("SubjectId");

                    b.ToTable("Topics");

                    b.HasData(
                        new
                        {
                            TopicId = 1,
                            SubjectId = 1,
                            TopicName = "Algebra"
                        },
                        new
                        {
                            TopicId = 2,
                            SubjectId = 1,
                            TopicName = "Geometry"
                        },
                        new
                        {
                            TopicId = 3,
                            SubjectId = 2,
                            TopicName = "Physics Basics"
                        },
                        new
                        {
                            TopicId = 4,
                            SubjectId = 3,
                            TopicName = "World War I"
                        },
                        new
                        {
                            TopicId = 5,
                            SubjectId = 4,
                            TopicName = "Continents and Oceans"
                        });
                });

            modelBuilder.Entity("TutorApp.Website.Models.Student", b =>
                {
                    b.HasOne("TutorApp.Website.Models.Class", "Class")
                        .WithMany("Students")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");
                });

            modelBuilder.Entity("TutorApp.Website.Models.StudentFile", b =>
                {
                    b.HasOne("TutorApp.Website.Models.Topic", "Topic")
                        .WithMany("Files")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("TutorApp.Website.Models.Subject", b =>
                {
                    b.HasOne("TutorApp.Website.Models.Class", "Class")
                        .WithMany("Subjects")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");
                });

            modelBuilder.Entity("TutorApp.Website.Models.Topic", b =>
                {
                    b.HasOne("TutorApp.Website.Models.Subject", "Subject")
                        .WithMany("Topics")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("TutorApp.Website.Models.Class", b =>
                {
                    b.Navigation("Students");

                    b.Navigation("Subjects");
                });

            modelBuilder.Entity("TutorApp.Website.Models.Subject", b =>
                {
                    b.Navigation("Topics");
                });

            modelBuilder.Entity("TutorApp.Website.Models.Topic", b =>
                {
                    b.Navigation("Files");
                });
#pragma warning restore 612, 618
        }
    }
}
